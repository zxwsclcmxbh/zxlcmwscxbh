/*
D0 D1 D2 D3 已被占用（wifi + Serial out）
*/

#include <Servo.h>
#include “OurSpark.h” //Color LED相关函数定义头文件
#include <SoftwareSerial.h>
#include “edp.c” //EDP协议相关函数定义头文件
#include <Wire.h>
#include<Arduino.h>
#include<math.h>
#define servoPin 9
int pos = 0;

#define KEY “tEGAhqrzfNptIvmOQ3Ptr2PnIsg=” //APIkey
#define ID “505295538” //设备ID
#define PUSH_ID NULL

//串口初始化
#define _baudrate 9600
#define _rxpin 3
#define _txpin 2
#define WIFI_UART mySerial
#define DBG_UART Serial //调试打印串口

SoftwareSerial mySerial( _txpin, _rxpin ); // 软串口，调试打印
edp_pkt *pkt;

Servo myservo; //定义舵机对象
ColorLEDController LEDController1(2, 6); //定义LED对象


bool doCmdOk(String data, char *keyword) //TCP连接检查
{
bool result =false;
if (data !=””) //对于tcp连接命令，直接等待第二次回复
{
WIFI_UART.println(data); //发送AT指令
DBG_UART.print(“SEND: “);
DBG_UART.println(data);
DBG_UART.println(WIFI_UART.readStringUntil(‘\n’));
}
if (data ==”AT”) //检查模块存在
{
delay(2000);
}
else{
while (!WIFI_UART.available()); // 等待模块回复
}

delay(200);

if (WIFI_UART.find(keyword)) //返回值判断
{
DBG_UART.println(“do cmd OK”);
result = true;
}
else
{

DBG_UART.println(“do cmd ERROR”);
result = false;
}
while (WIFI_UART.available()) WIFI_UART.read(); //清空串口接收缓存
delay(500); //指令时间间隔
return result;
}

void setup()
{

char buf[100] = {0};
int tmp;

WIFI_UART.begin( _baudrate );
DBG_UART.begin( _baudrate );
WIFI_UART.setTimeout(3000); //设置find超时时间
delay(3000);
DBG_UART.println(“Success!”);

delay(2000);

//WIFI连接
//while (!doCmdOk(“AT”, “OK”));
while (!doCmdOk(“AT+CWMODE=3”, “OK”)); //工作模式
while (!doCmdOk(“AT+CWJAP=\”HUAWEI Mate 10 Pro\”,\”qwerty12\””, “OK”)); //wifi名称，wifi密码
while (!doCmdOk(“AT+CIPSTART=\”TCP\”,\”183.230.40.39\”,876″, “CONNECT”));//CONNECT,Linked
while (!doCmdOk(“AT+CIPMODE=1”, “OK”)); //透传模式
while (!doCmdOk(“AT+CIPSEND”, “>”)); //开始发送

myservo.attach(servoPin);
myservo.write(pos);
LEDController1.ShowColor(0,255,255,255);
}
void loop()
{

staticint edp_connect =0;
bool trigger =false;
edp_pkt rcv_pkt;
unsignedchar pkt_type;
int i, tmp;
char num[10];
//EDP 连接
if (!edp_connect)
{
while (WIFI_UART.available()) WIFI_UART.read(); //清空串口接收缓存
packetSend(packetConnect(ID, KEY)); //发送EPD连接包
while (!WIFI_UART.available()); //等待EDP连接应答
if ((tmp = WIFI_UART.readBytes(rcv_pkt.data, sizeof(rcv_pkt.data))) >0 )
{
rcvDebug(rcv_pkt.data, tmp);
if (rcv_pkt.data[0] ==0x20&& rcv_pkt.data[2] ==0x00&& rcv_pkt.data[3] ==0x00)
{
edp_connect = 1;
DBG_UART.println(“EDP connected.”);
packetSend(packetDataSaveTrans(NULL,”online”, “1”)); //向onenet“online”数据流发送1
}
else
DBG_UART.println(“EDP connect error.”);
}
packetClear(&rcv_pkt);
}

while (WIFI_UART.available())
{
readEdpPkt(&rcv_pkt);
if (isEdpPkt(&rcv_pkt))
{
pkt_type = rcv_pkt.data[0];
//int value=1;
switch (pkt_type)
{
case CMDREQ:
char edp_command[50];
char edp_cmd_id[40];
long id_len, cmd_len, rm_len;
char datastr[20];
char val[10];
char val2[10];
memset(edp_command, 0, sizeof(edp_command));
memset(edp_cmd_id, 0, sizeof(edp_cmd_id));
edpCommandReqParse(&rcv_pkt, edp_cmd_id, edp_command, &rm_len, &id_len, &cmd_len);
DBG_UART.print(“rm_len: “);
DBG_UART.println(rm_len, DEC);
delay(10);
DBG_UART.print(“id_len: “);
DBG_UART.println(id_len, DEC);
delay(10);
DBG_UART.print(“cmd_len: “);
DBG_UART.println(cmd_len, DEC);
delay(10);
DBG_UART.print(“id: “);
DBG_UART.println(edp_cmd_id);
delay(10);
DBG_UART.print(“cmd: “);
DBG_UART.println(edp_command);

//数据处理与应用中EDP命令内容（onenet开关控件）对应
//本例中格式为 数据流名称：状态（0/1）
sscanf(edp_command, “%[^:]:%s”, datastr, val);
if (atoi(val) ==1){ //状态为1，则激活。
DBG_UART.print(“1”);
LEDController1.ShowColor(0,0,255,0);

for (pos =0; pos <180; pos +=1) // goes from 0 degrees to 180 degrees
{ // in steps of 1 degree
myservo.write(pos); // tell servo to go to position in variable ‘pos’
delay(15); // waits 15ms for the servo to reach the position
}

}
elseif(atoi(val)==0){ //状态为2，则失活。
DBG_UART.print(“0”);
LEDController1.ShowColor(0,255,0,0);

for (pos =180; pos >=1; pos -=1) // goes from 180 degrees to 0 degrees
{
myservo.write(pos); // tell servo to go to position in variable ‘pos’
delay(15); // waits 15ms for the servo to reach the position
}

}

packetSend(packetDataSaveTrans(NULL, datastr, val)); //将新数据值上传至数据流
break;
default:
LEDController1.ShowColor(0,255,0,255);
DBG_UART.print(“unknown type: “);
DBG_UART.println(pkt_type, HEX);
DBG_UART.print(“Lost Connection, Reconnecting…”);
if (edp_connect) //EDP丢失连接后重新连接
{
while (WIFI_UART.available()) WIFI_UART.read(); //清空串口接收缓存
packetSend(packetConnect(ID, KEY)); //发送EPD连接包
while (!WIFI_UART.available()); //等待EDP连接应答
if ((tmp = WIFI_UART.readBytes(rcv_pkt.data, sizeof(rcv_pkt.data))) >0 )
{
rcvDebug(rcv_pkt.data, tmp);
if (rcv_pkt.data[0] ==0x20&& rcv_pkt.data[2] ==0x00&& rcv_pkt.data[3] ==0x00)
{
edp_connect = 1;
DBG_UART.println(“EDP connected.”);
LEDController1.ShowColor(0,255,255,255);
packetSend(packetDataSaveTrans(NULL,”online”, “1”)); //向onenet“online”数据流发送1
}
else
DBG_UART.println(“EDP connect error.”);
}
packetClear(&rcv_pkt);
}

break;
}
}
//delay(4);
}
if (rcv_pkt.len>0)
packetClear(&rcv_pkt);
delay(150);
}
bool readEdpPkt(edp_pkt *p)
{
int tmp;
if ((tmp = WIFI_UART.readBytes(p->data+ p->len, sizeof(p->data))) >0 )
{
rcvDebug(p->data+ p->len, tmp);
p->len += tmp;
}
returntrue;
}
void packetSend(edp_pkt* pkt)
{
if (pkt !=NULL)
{
WIFI_UART.write(pkt->data, pkt->len); //串口发送
WIFI_UART.flush();
free(pkt); //回收内存
}
}

void rcvDebug(unsigned char *rcv, int len)
{
int i;

DBG_UART.print(“rcv len: “);
DBG_UART.println(len, DEC);
for (i =0; i < len; i++)
{
DBG_UART.print(rcv[i], HEX);
DBG_UART.print(” “);
}
DBG_UART.println(“”);
}